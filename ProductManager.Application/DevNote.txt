Сперва список продуктов проходит через фильтрацию по категориям.Потом по соответствию ПОИСКовым запросам. Далее сортируется. 
В конце концов делится на страницы заданного размера.
Фильтрация->Поиск->Сортировка->Размеры страниц->Пагинация
Попробовать впихнуть селектор размера страниц в PageLinkTagHelper
Полезные страницы
https://habr.com/ru/articles/510742/
https://www.c-sharpcorner.com/article/passing-data-from-asp-net-mvc-to-javascript-a-guide-to-using-viewbag-and-viewda/?ysclid=m3h6s8o8f7284310540
https://metanit.com/sharp/aspnet5/12.4.php
https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/search?view=aspnetcore-8.0
https://aspnetcore.readthedocs.io/en/stable/tutorials/first-mvc-app/search.html
localhost:5000/Products/название_категории/Search=поисковый_запрос/направление_сортировки/Page1/Size1 - конечный вид URL
https://translated.turbopages.org/proxy_u/en-ru.ru.1fb381a3-6749a371-30a91e5b-74722d776562/https/bobbyhadz.com/blog/javascript-convert-object-to-query-string
https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/search?view=aspnetcore-6.0
https://min.news/en/tech/a18fd7ea5f76c7c89874c699a7b6466f.html
фронтенд:
https://habr.com/ru/companies/domclick/articles/526244/
https://pikabu.ru/story/s_nulya_do_frontendrazrabotchika_nachalo_7366304?ysclid=m5qnkdfgqx958364497
всплывающие окна/modal popup
https://github.com/CodAffection/jQuery-Ajax-with-ASP.NET-Core-MVC-using-Modal-PopUp/blob/main/jQuery%20Ajax%20CRUD/jQuery%20Ajax%20CRUD/Controllers/TransactionController.cs 
примеры разметок всплывающих окон
<!-- Trigger/Open The Modal -->
<button id="myBtn">Open Modal</button>

<!-- The Modal -->
<div id="myModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Some text in the Modal..</p>
    </div>
</div>
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#detailsModal">Подробнее</button>
<div id="detailsModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подробнее о продукте</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Ид продукта: @Model.ProductID</p>
                <p>Название продукта: @Model.ProductName</p>
                <p>Описание продукта: @Model.ProductDescription</p>
                <p>Цена продукта: @Model.ProductPrice</p>
                @* <p>Категория продукта: @Model.Category!.CategoryName</p> *@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                @* <button type="button" class="btn btn-primary">Save changes</button> *@
            </div>
        </div>
    </div>
</div>
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
https://www.youtube.com/watch?v=SdbfR4dTHsc - 
https://www.youtube.com/watch?v=2NlBXhfwoOo <- blazor crud
https://www.youtube.com/watch?v=1n7MRc4VjOw <- useful basicsn 
https://www.youtube.com/watch?v=z58rXjCA8-k
https://www.youtube.com/watch?v=X3Jc5UfGhhE
https://www.youtube.com/watch?v=VF6wlRshzDQ <- check this code

https://dotnetgenetics.blogspot.com/2020/11/bootstrap-modal-in-aspnet-mvc-with-crud.html
https://www.quickpickdeal.com/coding/crud-operation-using-partial-view-in-mvc-with-modal-popup
https://www.c-sharpcorner.com/article/render-partial-view-as-modal-popup-using-ajax-call-with-json/?ysclid=m6837nlrs5343974131
https://learn.microsoft.com/en-us/archive/msdn-technet-forums/702076b1-a1e5-4b13-a2b3-01b25b1696e5
https://codemagik.wordpress.com/2015/04/07/render-mvc-partial-view-inside-bootstrap-modal-dialog/
https://www.codingfusion.com/Post/Using-Bootstrap-Modal-window-as-PartialView-in-Net-MVC
https://findnerd.com/list/view/Modal-popup-using-Partial-View/18440/
https://www.c-sharpcorner.com/article/create-asp-net-mvc-crud-application-with-entity-framework-using-ajax-request-and2/
https://www.scholarhat.com/tutorial/mvc/crud-operations-using-jquery-dialog-entity-framework-and-aspnet-mvc
--
https://www.c-sharpcorner.com/article/create-asp-net-mvc-crud-application-with-entity-framework-using-ajax-request-and2/
https://dotnettutorials.net/lesson/crud-operation-on-a-single-page-in-asp-net-core-mvc/
https://www.udemy.com/course/complete-aspnet-core-21-course/?couponCode=MT24125AROW
https://www.youtube.com/@LearnWithIndrjeet <- on future
https://www.c-sharpcorner.com/article/crud-operations-in-asp-net-core-using-entity-framework-core-code-first/ <-!!!!look at this
https://www.youtube.com/watch?v=X3Jc5UfGhhE <- 3:15
https://www.youtube.com/watch?v=JYP8kILu-ZU <-watch this in home
https://www.youtube.com/watch?v=gRBC50ddQzw <-???


dotnet ef database drop --force --context PredpriyatieDBContext <-reset database
dotnet ef migrations add Initial <- add initial migration

https://code-maze.com/select-tag-helper-aspnetcore/ <-dropdown list

https://github.com/shahedbd/DropdownTest/tree/main/DropdownTest2
https://habr.com/ru/companies/ruvds/articles/350758/ <- frontend bootstrap
https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/ <- frontend bootstrap
https://www.freecodecamp.org/news/learn-bootstrap-4-in-30-minute-by-building-a-landing-page-website-guide-for-beginners-f64e03833f33/ <- frontend bootstrap
https://drawdb.vercel.app/editor <- visual scheme database diagram editor(get data from export from sql file in Database Visual Scheme folder in application folder)

https://code-maze.com/efcore-relationships/ <- ef core relationships
https://stackoverflow.com/questions/30449026/the -field-must-be-a-number <- validation error in price field
https://www.yogihosting.com/aspnet-core-model-validation/#asp-validation-summary
https://github.com/dotnet/AspNetCore.Docs/issues/4076#issuecomment-326590420

string? category, string? searchString, SortOrder sortOrder = SortOrder.Neutral, int productPage = 1, int pageSize = 1

size order page
size page order
 
crud unit test
https://www.c-sharpcorner.com/article/crud-operations-unit-testing-in-asp-net-core-web-api-with-xunit/?ysclid=mam6axezsv314719474
https://stackoverflow.com/questions/3215224/when-how-to-unit-test-crud-applications




Базовый функционал редактирования прайслиста:

1 Изменить основные свойства прайс-листа.

2 Добавлять/удалять товары.

3 Менять параметры товаров (лучше inline).

4 Массовое обновление цен.

5 Импорт/экспорт (если нужно).

6 Валидация + отмена действий.





Хороший вопрос! Да, **если не продумать синхронизацию данных между таблицей товаров и прайс-листами, могут возникнуть проблемы**. Давай разберём возможные сценарии и решения.  

---

### **Проблема: Расхождение данных между товарами и прайс-листами**  
Допустим, у нас есть:  
- **Таблица `Products`** (основные данные о товаре: название, артикул, категория и т. д.).  
- **Таблица `PriceLists`** (прайс-листы, где товары ссылаются на `Products`, но имеют свои **доп. параметры**: цена, скидка, наличие).  

#### **Что может пойти не так?**  
1. **Изменение товара в `Products` → старые прайс-листы показывают устаревшие данные**  
   - Например, если поменять **название товара** в `Products`, во всех старых прайс-листах останется старое название.  
   - Если удалить товар из `Products`, в прайс-листах он станет "битой ссылкой".  

2. **Изменение цены в прайс-листе → нужно ли обновлять основную цену в `Products`?**  
   - Зависит от бизнес-логики. Иногда цена в прайс-листе — это **локальная цена** (например, для конкретного клиента), а не глобальная.  

---

### **Как избежать проблем?**  
Есть **три подхода**, выбор зависит от требований:  

#### **1. Жёсткая связь (данные в прайс-листе зависят от `Products`)**  
- В прайс-листе хранятся **только ссылки на товары (`ProductId`)** + **локальные параметры** (цена, скидка).  
- **Название, описание и другие базовые данные** всегда подтягиваются из `Products`.  
- **Плюсы:**  
  - Нет дублирования данных.  
  - Всегда актуальная информация о товаре.  
- **Минусы:**  
  - Если товар удалён из `Products`, он пропадает из прайс-листов (или помечается как "недоступный").  
  - Нельзя сохранить историю изменений (например, если название товара поменялось, старые прайс-листы тоже обновятся).  

#### **2. Гибридный подход (копирование ключевых данных)**  
- В прайс-листе хранится **`ProductId` + основные поля (название, артикул)** + **локальные параметры (цена)**.  
- При редактировании прайс-листа:  
  - Если товар уже есть в нём — меняется только **цена/скидка**.  
  - Если товар новый — его данные (**название, артикул**) копируются из `Products`.  
- **Плюсы:**  
  - Даже если товар удалён из `Products`, он остаётся в старых прайс-листах.  
  - Можно вести историю изменений.  
- **Минусы:**  
  - Если данные в `Products` обновляются, старые прайс-листы останутся с устаревшей информацией.  

#### **3. Полная независимость (прайс-лист — это "снимок" на момент создания)**  
- При добавлении товара в прайс-лист **все данные копируются** (название, цена, артикул и т. д.).  
- `ProductId` не хранится или опционален.  
- **Плюсы:**  
  - Полная историчность: прайс-лист всегда отражает состояние на момент создания.  
  - Нет проблем с удалёнными/изменёнными товарами.  
- **Минусы:**  
  - Дублирование данных.  
  - Нет автоматического обновления (если нужно исправить опечатку в названии, придётся менять во всех прайс-листах вручную).  

---

### **Какой вариант выбрать?**  
- **Если важно, чтобы прайс-листы всегда отражали текущие данные** → **Вариант 1** (жёсткая связь).  
- **Если нужно сохранять исторические данные** → **Вариант 2 или 3**.  
- **Если прайс-листы — это "договорные цены"** (например, у каждого клиента свой прайс) → **Вариант 2**.  

---

### **Вывод**  
Если реализовать **пункты 3 и 4** без связывания данных:  
- При изменении товара в `Products` **старые прайс-листы могут "поплыть"**.  
- Решение: **выбрать стратегию синхронизации** (1, 2 или 3) и чётко её соблюдать.  

**Рекомендация:**  
Начни с **Варианта 2** (гибридный подход), так как он:  
- сохраняет связь с товарами,  
- но позволяет хранить "снимок" данных на момент добавления в прайс-лист.  

Если будут нюансы — можно доработать!